2025-03-13

#Cree las Carpetas para el proyecto fiebre_de_Norilsk (proyecto final del troncal) seg√∫n la organizaci√≥n del paper " A quick guide to organizing computational biology projects" de William Stafford Noble (doi:10.1371/journal.pcbi.1000424): 

üìÇ fiebre_de_Norilsk/
‚îú‚îÄ‚îÄ üìÇ data/             # Datos crudos y preprocesados
‚îú‚îÄ‚îÄ üìÇ results/          # Resultados de experimentos
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ 2025-03-13/  # Experimento del 13 de marzo
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ runall       # Script principal del experimento
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ output.txt   # Resultados generados
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ summary.png  # Gr√°ficos
‚îÇ   ‚îú‚îÄ‚îÄ lab_notebook.txt # Registro cronol√≥gico de experimentos
‚îú‚îÄ‚îÄ üìÇ doc/              # Manuscritos y documentaci√≥n
‚îú‚îÄ‚îÄ üìÇ src/              # C√≥digo fuente del proyecto
‚îú‚îÄ‚îÄ üìÇ bin/              # Scripts ejecutables
‚îî‚îÄ‚îÄ üìÇ scripts/          # Herramientas reutilizables en otros proyectos

#Descargue de la nube el archivo ‚ÄúRNA-Seq-expression-Norilsk2019.csv‚Äù (https://tinyurl.com/RNA-seq-Norilsk2019) donde se encuentran los genes del RNA-seq del proyecto. Y lo guarde en la carpeta "data/".

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2025-03-30  #FELIPE GARC√çA

Busque otros modelos para poder hacer los calculos de R0 y la proyeccion a las 10 semanas. Lo que se me ocurrio fue primero buscar el modelo de calculo de R0 mas 
ideal para los datos que tengo (Susceptible, infectados y muertos). Para estos datos el modelo ideal es el modelo SIRD (Susceptibles - Infectados - Recuperados - Muertos)

1. C√°lculo de ùëÖ0
 
Usar√≠a un modelo SIRD con ajuste de par√°metros para estimar ùëÖ0, ya que:

La tasa de recuperaci√≥n (ùõæ) puede aproximarse considerando que la mayor√≠a de los removidos son fallecidos.

La tasa de transmisi√≥n (ùõΩ) puede ajustarse a partir del crecimiento de infectados.

Permite incluir la mortalidad de forma realista.

Si los datos iniciales indican un crecimiento descontrolado, tambi√©n usar√≠a un ajuste exponencial para una primera estimaci√≥n de ùëÖ0.

2. Proyecci√≥n de la Epidemia (Hasta Semana 10)
Modelo SIRD ajustado din√°micamente: Para predecir la evoluci√≥n de la epidemia considerando el agotamiento de susceptibles.

LSTM (Red Neuronal Recurrente): Para hacer predicciones basadas en patrones de crecimiento en los datos, complementando el modelo SIRD.

3. Machine Learning para Optimizaci√≥n de Par√°metros
XGBoost o Random Forest: Para encontrar relaciones no lineales entre variables como tasa de mortalidad, infectados y posibles factores externos (si hay m√°s datos disponibles).

Physically Informed Neural Networks (PINNs): Para ajustar los par√°metros del modelo SIRD con datos reales y mejorar las predicciones.

¬øPor qu√© esta combinaci√≥n?
SIRD proporciona estructura epidemiol√≥gica, permitiendo hacer predicciones basadas en la biolog√≠a de la enfermedad.

LSTM o Prophet ayudan a detectar tendencias y anomal√≠as sin asumir ecuaciones fijas.

XGBoost y PINNs optimizan la precisi√≥n al ajustar los par√°metros epidemiol√≥gicos con ML.


#INSTALE LOS SIGUIENTES PACKAGES:

catboost==1.2.5		
matplotlib==3.8.4	
numpy==1.26.4		
openpyxl==3.1.2			
pandas==2.2.2		
scikit-learn==1.4.2
scikit-optimize==0.10.1 
scipy==1.13.0		
seaborn==0.13.2		
shap==0.45.0		
xgboost==2.0.3		
openpyxl== 3.1.5	
statsmodels==¬†0.14.4	
tensorflow== 2.16.1

*Este es el codigo de Python que me dio chatgpt:

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from sklearn.ensemble import RandomForestRegressor
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam
from scipy.optimize import curve_fit

# Cargar los datos
data = pd.read_csv('/mnt/data/Evoluci√≥n_enfermedad_fiebre_de_Norilsk.csv')

# Extraer columnas relevantes
susceptibles = data['Susceptibles'].values
infectados = data['Infectados'].values
muertos = data['Muertos'].values
tiempo = np.arange(len(data))

# Estimar removidos (muertos asumidos como removidos)
removidos = np.cumsum(muertos)

# Definir el modelo SIRD
def sird_model(y, t, beta, gamma, mu):
    S, I, R = y
    dSdt = -beta * S * I / (S + I + R)
    dIdt = beta * S * I / (S + I + R) - gamma * I - mu * I
    dRdt = gamma * I + mu * I
    return [dSdt, dIdt, dRdt]

# Funci√≥n de ajuste de par√°metros
def fit_sird(t, beta, gamma, mu):
    sol = odeint(sird_model, [S0, I0, R0], t, args=(beta, gamma, mu))
    return sol[:, 1]  # Ajustar a los datos de infectados

# Condiciones iniciales
S0 = susceptibles[0]
I0 = infectados[0]
R0 = removidos[0]

# Ajuste de par√°metros con curve_fit
params, _ = curve_fit(fit_sird, tiempo, infectados, p0=[0.4, 0.1, 0.05], bounds=(0, [1, 1, 1]))
beta_opt, gamma_opt, mu_opt = params

# Resolver la ODE con los par√°metros ajustados
sol = odeint(sird_model, [S0, I0, R0], tiempo, args=(beta_opt, gamma_opt, mu_opt))
S_pred, I_pred, R_pred = sol.T

# Gr√°fica de evoluci√≥n
plt.figure(figsize=(10,6))
plt.plot(tiempo, S_pred, label='Susceptibles (Predicci√≥n)')
plt.plot(tiempo, I_pred, label='Infectados (Predicci√≥n)')
plt.plot(tiempo, R_pred, label='Removidos (Predicci√≥n)')
plt.scatter(tiempo, susceptibles, label='Datos Susceptibles', color='blue', alpha=0.5)
plt.scatter(tiempo, infectados, label='Datos Infectados', color='red', alpha=0.5)
plt.scatter(tiempo, removidos, label='Datos Removidos', color='green', alpha=0.5)
plt.legend()
plt.xlabel('Tiempo (semanas)')
plt.ylabel('Poblaci√≥n')
plt.title('Modelo SIRD - Proyecci√≥n Epidemia con Par√°metros Ajustados')
plt.show()

# Implementaci√≥n de ML para mejorar la predicci√≥n con Random Forest
X = np.column_stack([susceptibles, infectados, removidos])
y = np.roll(infectados, -1)  # Predecir infectados en el siguiente paso
model_rf = RandomForestRegressor(n_estimators=100)
model_rf.fit(X[:-1], y[:-1])

# Predicci√≥n con Random Forest
pred_rf = model_rf.predict(X)

# Implementaci√≥n de LSTM para series temporales
X_lstm = np.reshape(X, (X.shape[0], X.shape[1], 1))
y_lstm = y
model_lstm = Sequential([
    LSTM(50, activation='relu', input_shape=(X.shape[1], 1)),
    Dense(1)
])
model_lstm.compile(optimizer=Adam(), loss='mse')
model_lstm.fit(X_lstm[:-1], y_lstm[:-1], epochs=50, verbose=0)

# Predicci√≥n con LSTM
pred_lstm = model_lstm.predict(X_lstm)

# Graficar comparaciones
plt.figure(figsize=(10,6))
plt.plot(tiempo, infectados, label='Infectados Reales', color='red')
plt.plot(tiempo, pred_rf, label='Predicci√≥n Random Forest', linestyle='dashed')
plt.plot(tiempo, pred_lstm, label='Predicci√≥n LSTM', linestyle='dotted')
plt.xlabel('Tiempo (semanas)')
plt.ylabel('N√∫mero de Infectados')
plt.title('Comparaci√≥n de Modelos de Machine Learning')
plt.legend()
plt.show()


*Este codigo es la base para los analisis.

#Conclusion: Este modelo no fue tan ideal para mis calculos de momento. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Volvi a probar los calculo sin el uso de ML.

PACKAGES Instalados:

numpy==1.26.4		
matplotlib==3.8.4
scipy==1.13.0
ipywidgets==8.1.2

Este es el codigo utilizado de momento:

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from ipywidgets import interact, FloatSlider, Dropdown

# Datos de las ciudades
ciudades = {
    'Norilsk': {'poblacion': 180000, 'infectados_iniciales': 300, 'muertes_semana2': 300, 'muertes_semana3': 650},
    'Kayerkan': {'poblacion': 25000, 'infectados_iniciales': 10, 'muertes_semana2': 120, 'muertes_semana3': 1000},
    'Dudinka': {'poblacion': 20000, 'infectados_iniciales': 20, 'muertes_semana2': 60, 'muertes_semana3': 900}
}

def modelo_sird(y, t, beta, gamma, mu, N):
    S, I, R, D = y
    dSdt = -beta * S * I / N
    dIdt = beta * S * I / N - (gamma + mu) * I
    dRdt = gamma * I
    dDdt = mu * I
    return [dSdt, dIdt, dRdt, dDdt]

@interact(
    ciudad=Dropdown(options=list(ciudades.keys()), description='Ciudad'),
    R0=FloatSlider(min=1.0, max=5.0, step=0.1, value=2.5, description='R‚ÇÄ'),
    duracion_infeccion=FloatSlider(min=5, max=20, step=1, value=12, description='Duraci√≥n (d√≠as)'),
    CFR=FloatSlider(min=0.1, max=0.8, step=0.05, value=0.45, description='CFR')
)
def simular_epidemia(ciudad, R0, duracion_infeccion, CFR):
    datos = ciudades[ciudad]
    N = datos['poblacion']
    I0 = datos['infectados_iniciales']
    S0 = N - I0
    
    # C√°lculo de par√°metros
    mu = CFR / duracion_infeccion
    gamma = (1 - CFR) / duracion_infeccion
    beta = R0 * (gamma + mu)
    
    # Simulaci√≥n
    t = np.linspace(0, 70, 70)
    sol = odeint(modelo_sird, [S0, I0, 0, 0], t, args=(beta, gamma, mu, N))
    S, I, R, D = sol.T
    
    # Puntos observados
    obs_t = [0, 14, 21]  # D√≠as (semana 1, 2, 3)
    obs_I = [I0, datos['infectados_iniciales']*5, datos['infectados_iniciales']*16.7]  # Valores aproximados
    obs_D = [0, datos['muertes_semana2'], datos['muertes_semana3']]
    
    # Visualizaci√≥n
    plt.figure(figsize=(12, 6))
    plt.plot(t, S, 'b-', label='Susceptibles', linewidth=2)
    plt.plot(t, I, 'r--', label='Infectados', linewidth=2)
    plt.plot(t, D, 'k-', label='Muertos', linewidth=2)
    plt.scatter(obs_t, obs_I, color='r', s=100, marker='o', label='Infectados observados')
    plt.scatter(obs_t, obs_D, color='k', s=100, marker='X', label='Muertes observadas')
    
    plt.title(f'Modelo SIRD - {ciudad}\n'
              f'R‚ÇÄ = {R0:.2f} | CFR = {CFR:.0%} | Duraci√≥n infecci√≥n = {duracion_infeccion} d√≠as\n'
              f'Poblaci√≥n: {N:,} | Proyecci√≥n muertes semana 10: {int(D[-1]):,} ({D[-1]/N:.1%})',
              pad=20)
    
    plt.xlabel('D√≠as desde el inicio', fontsize=12)
    plt.ylabel('N√∫mero de personas', fontsize=12)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.show()
    
    # Resultados num√©ricos
    print(f"\nüîç Resultados para {ciudad}:")
    print(f"- Pico de infecci√≥n: {int(I.max()):,} personas (d√≠a {int(t[np.argmax(I)])})")
    print(f"- Total infectados semana 10: {int(I[-1] + R[-1]):,} ({((I[-1]+R[-1])/N):.1%} poblaci√≥n)")
    print(f"- Muertes acumuladas semana 10: {int(D[-1]):,} ({D[-1]/N:.1%} poblaci√≥n)")

    Este codigo me genero unos graficos interactivos de cada ciudad, en la cual puedo modificar el R0 para poder medir la proyeccion de Infectados y Muertes a la 
    semana 10. Pero tengo que modificarlo para que me entregue el R0 real de la enfermedad.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2025-04-05  #IDENTIFICACION DEL PATOGENO: objetivo 3

Hoy voy a trabajar en el objetivo 3 del proyecto que es la identificacion del PATOGENO

Voy a utilizar los scripts de la carpeta C:\Users\fgarc\OneDrive\Escritorio\Doctorado\Ramos\1¬∞ Semestre\Troncal\proyecto_troncal2\scripts\identificacion_patogeno


Al parecer el codigo del Preprocessing para poder limpiar los datos de las secuencias (eliminar las x) quedan en un formato FASTA pero se repiten secuencias. Debo arreglarlo

Pude hacer el codigo para hacer el blast remoto y funciona ok. Quiero ver si el blastn que hace el codigo es el mismo de la pagina o si puedo hacer el Megablast (recomendado de la pagina blast)

Para poder hacer el Clustal tengo que solucionar primero lo del curado de las secuencias.